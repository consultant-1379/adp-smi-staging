pipeline {
  agent {
    node('presentation')
  }
  environment {
    DEPLOY_IAM = true
  }
  options {
    ansiColor('xterm')
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
  }
  parameters {
    string(name: 'GAS_VERSION', description: 'The version of the GAS Helm chart to deploy. If not provided, the latest drop will be used. Please see drop packages here: https://arm.epk.ericsson.se/artifactory/proj-eea-drop-helm/eric-adp-gui-aggregator-service/ and release packages here: https://arm.epk.ericsson.se/artifactory/proj-eea-released-helm/eric-adp-gui-aggregator-service/')
    string(name: 'HA_VERSION', description: 'The version of the HA Helm chart to deploy. If not provided, the latest drop will be used. Please see drop packages here: https://arm.epk.ericsson.se/artifactory/proj-eea-drop-helm/eric-oss-help-aggregator/ and release packages here: https://arm.epk.ericsson.se/artifactory/proj-eea-released-helm/eric-oss-help-aggregator/')
    string(name: 'UIS_VERSION', description: 'The version of the UI Settings Helm chart to deploy. If not provided, the latest drop will be used. Please see drop packages here: https://arm.epk.ericsson.se/artifactory/proj-eea-drop-helm/eric-oss-ui-settings/ and release packages here: https://arm.epk.ericsson.se/artifactory/proj-eea-released-helm/eric-oss-ui-settings/')
  }
  stages {
    stage('Clean') {
      steps {
        sh 'bob clean'
      }
    }
    stage('Init') {
      steps {
        lock(resource: null, label: 'presentation-ci', quantity: 1, variable: 'system') {
          withCredentials([
          usernamePassword(credentialsId: 'arm-seli-eeaprodart-token', usernameVariable: 'ARM_USER_SELI', passwordVariable: 'ARM_TOKEN_SELI'),
          file(credentialsId: env.system, variable: 'KUBECONFIG')
          ]) {
            ansiColor('xterm') {
              sh 'bob init-combined'
            }
          }
        }
      }
    }
    stage('Install npm dependencies') {
      steps {
        sh 'bob npm-install'
      }
    }
    stage('K8 Tests') {
      stages {
        stage('Deploy GAS and HA and CI chart ') {
          steps {
            lock(resource: null, label: 'presentation-ci', quantity: 1, variable: 'system') {
              withCredentials([
                usernamePassword(credentialsId: 'arm-seli-eeaprodart-token', usernameVariable: 'ARM_USER_SELI', passwordVariable: 'ARM_TOKEN_SELI'),
                usernamePassword(credentialsId: 'arm-sero-eeaprodart-token', usernameVariable: 'ARM_USER_SERO', passwordVariable: 'ARM_TOKEN_SERO'),
                file(credentialsId: env.system, variable: 'KUBECONFIG')
              ]) {
                ansiColor('xterm') {
                  sh 'bob -r ci/rulesets/test-rules.yaml deploy-gas-ha-and-ci'
                }
              }
            }
          }
        }
        stage('Run integration tests') {
          steps {
            sh 'bob -r ci/rulesets/test-rules.yaml run-integration-tests'
          }
        }
        stage('Clean namespace') {
          steps {
            lock(resource: null, label: 'presentation-ci', quantity: 1, variable: 'system') {
              withCredentials([
                file(credentialsId: env.system, variable: 'KUBECONFIG')
              ]) {
                ansiColor('xterm') {
                  sh 'bob namespace-cleanup'
                }
              }
            }
          }
        }
      }
    }
  }
  post {
    always {
      publishHTML(target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: 'integration-tests/test/backend/reports/mochawesome/',
        reportFiles: 'mochawesome.html',
        reportName: 'WS Endpoint Integration Report'
      ])
      publishHTML(target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: 'integration-tests/test/ui/allure-report/',
        reportFiles: 'index.html',
        reportName: 'UI Selenium Integration Report'
      ])
    }
    cleanup {
      sh "docker ps -a -q --filter label=$BUILD_TAG | xargs --no-run-if-empty  docker stop"
      sh "docker ps -a -q --filter label=$BUILD_TAG | xargs --no-run-if-empty  docker rm"
    }
    failure {
      mail to: 'f98b007c.ericsson.onmicrosoft.com@emea.teams.ms',
      subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
      body: "Failure on ${env.BUILD_URL}"
    }
  }
}
